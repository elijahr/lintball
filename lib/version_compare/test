#!/bin/bash

# Download shUnit2 if needed.
[ ! -d ./shunit2-2.1.6 ] && curl -sL https://github.com/aetheric/shunit2/archive/2.1.6.tar.gz | tar zx

function oneTimeSetUp() {
  if test -t 1; then
    ncolors=$(tput colors)
    if test -n "$ncolors" && test "$ncolors" -ge 8; then
      red="$(tput setaf 1)" && green="$(tput setaf 2)" && normal="$(tput sgr0)"
    fi
  fi
}

function setUp() {
  # Source the necessary functions.
  source ./version_compare
}

function tearDown {
  # Remove the sourced functions.
  unset -f version_compare
  unset -f version_compare_convert
}

function _test_output() {
  local func="${1}"
  local expected="${2}"
  local v1="${3}"
  local v2="${4}"
  local actual="$(${func} "${v1}" "${v2}")"
  [ "${expected}" == "${actual}" ] && result="${green}[✓ PASS]${normal}" || result="${red}[X FAIL]${normal}"
  if [ -n "${v2}" ]; then
    printf '%5s %30s <> %-30s (%s)\n' "${result}" "${v1}" "${v2}" "${actual}"
  else
    printf '%5s %-64s (%s)\n' "${result}" "${v1}" "${actual}"
  fi
  assertEquals "${expected}" "${actual}"
}

function _test_return() {
  local func="${1}"
  local expected="${2}"
  local v1="${3}"
  local v2="${4}"
  local op="${5}"
  "${func}" "${v1}" "${v2}" "${op}" &>/dev/null
  local actual=$?
  [ "${expected}" == "${actual}" ] && result="${green}[✓ PASS]${normal}" || result="${red}[X FAIL]${normal}"
  printf '%5s %30s %2s %-30s (%s)\n' "${result}" "${v1}" "${op}" "${v2}" "${actual}"
  assertEquals "${expected}" "${actual}"
}

function testVersionCompareArgs() {
  while read -r test; do
    _test_return version_compare "$test"
  done <<EOF
1
1 1
0 1.0.0 1
0 1 1.0 =
EOF
}

function testVersionCompareLogic() {
  # True.
  ret=$(version_compare 2 1 ">")
  [ $? -eq 0 ] && assertEquals 0 0 || assertEquals 0 1
  version_compare 2 1 ">" && assertEquals 0 0 || assertEquals 0 1
  version_compare 2 1 ">" -eq 0 && assertEquals 0 0 || assertEquals 0 1

  # False.
  ret=$(version_compare 1 2 ">")
  [ $? -eq 0 ] && assertEquals 1 0 || assertEquals 1 1
  version_compare 1 2 ">" && assertEquals 1 0 || assertEquals 1 1
  version_compare 1 2 ">" -eq 0 && assertEquals 1 0 || assertEquals 1 1
}

function testVersionCompareConvert() {
  while read -r test; do
    _test_output version_compare_convert "$test"
  done <<EOF
1000000000000             1
1000000000000             1.0
1000000000000             1.0.0
1000000000000             1.0.0.0
1000000000000             1.0.0.0.0
1000000000000             1.0.0+build.meta-data
1000000000000-prerelease  1.0.0-prerelease+build.meta-data
1000100000000             1.1
1000100010000             1.1.1
1000100010001             1.1.1.1
1000100010001             1.1.1.1.1
1000100010000-2           1.1.1-2
1000100000000-alpha       1.1.0-alpha
1000100000000-alpha1      1.1.0-alpha1
1000100000000-alpha2      1.1.0-alpha2
1000100000000-alpha3      1.1.0-alpha3
1000100000000-beta        1.1.0-beta
1000100000000-beta1       1.1.0-beta1
1000100000000-beta2       1.1.0-beta2
1000100000000-beta3       1.1.0-beta3
1000100000000-rc          1.1.0-rc
1000100000000-rc1         1.1.0-rc1
1000100000000-rc2         1.1.0-rc2
1000100000000-rc3         1.1.0-rc3
1000100000000-zeta        1.1.0-zeta
1000100000000-zeta1       1.1.0-zeta1
1000100000000-zeta2       1.1.0-zeta2
1000100000000-zeta3       1.1.0-zeta3
3000000040010             3.0.04.10
3000000040010             3.0.4.10
3000000040002             3.0.4.2
9999999999999999          9999.9999.9999.9999
EOF
}

function testVersionCompareSuccess() {
  while read -r test; do
    _test_return version_compare "$test"
  done <<EOF
0     1            1            =
0     1.0          1            ==
0     1.0.0        1            eq
0     1            1.0          =
0     1            1.0.0        ==
0     1.0.0        1.0.0        eq
0     1.0.0        1.0.0        =
0     1.0.0        1.0.0        ==
0     1            2.0.0        !=
0     1            2.0.0        <>
0     1            2.0.0        ne
0     2.1          2.2          lt
0     2.2          2.2          ge
0     2.3          2.2          >=
0     3.0.4.10     3.0.4.2      gt
0     4.08         4.08.01      <
0     3.2.1.9.8144 3.2          gt
0     3.2          3.2.1.9.8144 <
0     1.2          2.1          <
0     2.1          1.2          >
0     5.6.7        5.6.7        ge
0     1.01.1       1.1.1        le
0     1.1.1        1.01.1       =
0     1            1.0          =
0     1.0          1            =
0     1.0.2.0      1.0.2        =
0     1..0         1.0          =
0     1.0          1..0         =
0     1.0.0        1.0.0-alpha  >
0     1.0.0-alpha  1.0.0-alpha1 <
0     1.0.0-alpha1 1.0.0-alpha1 <=
0     1.0.0-beta2  1.0.0-beta1  >
0     1.0.0-beta1  1.0.0-beta2  <
0     1.0.0-beta1  1.0.0-alpha1 >
0     1.0.0-alpha1 1.0.0-beta1  <
0     1.0.0-alpha1 1.0.0-alpha1 =
0     1.0.0-alpha1 1.0.0-alpha1 >=
0     1.0.0-alpha1 1.0.0-alpha1 <=
0     9999.9999.9999.9999 9999.9999.9999.9999 =
EOF
}

function testVersionCompareFailure() {
  while read -r test; do
    _test_return version_compare "$test"
  done <<EOF
1     1            2            =
1     1.0.0        2.0.1        ==
1     1.0.0        1.0.1        eq
1     1            1            !=
1     1            1            <>
1     1            1            ne
1     1            1            >
1     1            1.0.0        gt
1     1.0.0        2            >
1     2            1.0.0        <
1     2            1.0.0        lt
1     2.1          2.2.0        =
1     2.2.0        2.1          le
1     3.2.0        2.1          <=
EOF
}

function testVersionCompareOutput() {
  while read -r test; do
    _test_output version_compare "$test"
  done <<EOF
0   1            1
-1  2.1          2.2
0   2.2          2.2
1   2.3          2.2
1   3.0.4.10     3.0.4.2
-1  4.08         4.08.01
1   3.2.1.9.8144 3.2
-1  3.2          3.2.1.9.8144
-1  1.2          2.1
1   2.1          1.2
0   5.6.7        5.6.7
0   1.01.1       1.1.1
0   1.1.1        1.01.1
0   1            1.0
0   1.0          1
0   1.0.2.0      1.0.2
0   1..0         1.0
0   1.0          1..0
1   1.0.0        1.0.0-alpha
-1  1.0.0-alpha  1.0.0-alpha1
1   1.0.0-beta2  1.0.0-beta1
-1  1.0.0-beta1  1.0.0-beta2
1   1.0.0-beta1  1.0.0-alpha1
-1  1.0.0-alpha1 1.0.0-beta1
0   1.0.0-alpha1 1.0.0-alpha1
0   1.0.0-alpha1 1.0.0-alpha1
0   1.0.0-alpha1 1.0.0-alpha1
EOF
}

function testVersionCompareCliOutput() {
  tearDown
  while read -r test; do
    _test_output ./version_compare "$test"
  done <<EOF
0 1.0.0 1
1 2.0.0 1.0.3
-1 2.04.5 3.0.9
EOF
}

function testVersionCompareCliReturn() {
  tearDown
  while read -r test; do
    _test_return ./version_compare "$test"
  done <<EOF
1
1 1
0 1.0.0 1
0 1 1.0 =
0 2.2.4 1.1.0 >
0 2.9 3.0.0 <
EOF
}

# Execute shUnit2 to run the tests.
source shunit2-2.1.6/src/shunit2
