# yamllint disable rule:line-length
# yamllint disable rule:comments-indentation

name: Test
on:
  pull_request:
    branches: ["*"]
  push:
    branches: ["*"]
    tags: ["*"]

jobs:
  # lint:
  #   name: lint
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install tools
  #       shell: bash
  #       run: ./bin/lintball install-tools

  #     - name: Run lintball
  #       shell: bash
  #       run: ./bin/lintball check

  # test:
  #   name: bats unit tests (${{ matrix.runs-on }})
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       runs-on:
  #         # - ubuntu-latest
  #         - macos-latest

  #   runs-on: ${{ matrix.runs-on }}

  #   steps:
  #     - name: Install macOS dependencies
  #       if: ${{ runner.os == 'macOS' }}
  #       run: brew install bash parallel

  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: "16.x"

  #     - uses: dtolnay/rust-toolchain@nightly

  #     - name: Install tools
  #       shell: bash
  #       run: |
  #         set -euxo pipefail

  #         cd tools
  #         npm ci --verbose
  #         # seems to be necessary for node >= 15
  #         [ -n "$(which bats)" ] || npm link bats --verbose
  #         cd ..

  #         ./bin/lintball install-tools --all

  #     - name: Run tests
  #       run: |
  #         cd tools
  #         npm run test

  # install-local:
  #   name: test local installation
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Install lintball
  #       run: npm install "https://github.com/${GITHUB_REPOSITORY}.git#${GITHUB_SHA}"

  #     - name: Install tools
  #       run: npx lintball install-tools --all

  #     - name: Run lintball
  #       run: npx lintball --help

  # install-global:
  #   name: test global installation
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Install lintball
  #       run: sudo npm install -g "https://github.com/${GITHUB_REPOSITORY}.git#${GITHUB_SHA}"

  #     - name: Install tools
  #       run: sudo lintball install-tools --all

  #     - name: Run lintball
  #       run: lintball --help

  build-docker:
    name: "build, test, & push docker"
    runs-on: ubuntu-latest
    # needs: [install-local, install-global]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build amd64
        run: |
          docker buildx build \
            --progress=plain \
            --build-arg="DEBIAN_VERSION=bullseye" \
            --build-arg="TESTING=yes" \
            --platform linux/amd64 \
            --cache-from=elijahr/lintball \
            --tag elijahru/lintball \
            --load \
            .

      - name: Lint
        # Lint lintball with lintball
        run: |
          export LINTBALL_WORKSPACE="${{ github.workspace }}"
          docker-compose run check

      - name: Test
        # Run tests in built docker
        run: |
          export LINTBALL_WORKSPACE="${{ github.workspace }}"
          docker-compose run test

      - name: Build arm64
        run: |
          docker buildx build \
            --build-arg="DEBIAN_VERSION=bullseye" \
            --build-arg="TESTING=yes" \
            --platform linux/amd64,linux/arm64 \
            --cache-from=elijahr/lintball \
            --tag elijahru/lintball \
            .

      - name: Push to DockerHub
        # Only for git tag pushes; build arm64 and push all images to DockerHub
        # if: ${{ startsWith(github.ref, 'refs/tags/') }}
        shell: bash
        run: |
          set -uexo pipefail

          if [[ -n $(command -v jq) ]]; then
            version=$(jq -r .version ./package.json)
          elif [[ -n $(command -v npm) ]]; then
            # shellcheck disable=SC2016
            version=$(npm -s run env echo '$npm_package_version')
          else
            echo >&2
            echo "Could not find jq or npm. Please install one of them." >&2
            exit 1
          fi
          major_version=$(echo "${version}" | awk -F '.' '{print $1}')
          minor_version=$(echo "${version}" | awk -F '.' '{print $2}')

          declare -a tags=("latest" "${major}" "${major.minor}" "${version}")
          for tag in "${tags[@]}"; do
            docker buildx build \
              --build-arg="DEBIAN_VERSION=bullseye" \
              --build-arg="TESTING=yes" \
              --platform linux/amd64,linux/arm64 \
              --cache-from=elijahr/lintball \
              --tag "elijahru/lintball:${tag}" \
              --push \
              .
          done
