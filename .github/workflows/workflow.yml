# yamllint disable rule:line-length
# yamllint disable rule:comments-indentation

name: Test
on:
  pull_request:
    branches: ["*"]
  push:
    branches: ["*"]
    tags: ["*"]

jobs:
  # lint:
  #   name: lint
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install tools
  #       shell: bash
  #       run: ./bin/lintball install-tools

  #     - name: Run lintball
  #       shell: bash
  #       run: ./bin/lintball check

  # test:
  #   name: bats unit tests (${{ matrix.runs-on }})
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       runs-on:
  #         # - ubuntu-latest
  #         - macos-latest

  #   runs-on: ${{ matrix.runs-on }}

  #   steps:
  #     - name: Install macOS dependencies
  #       if: ${{ runner.os == 'macOS' }}
  #       run: brew install bash parallel

  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: "16.x"

  #     - uses: dtolnay/rust-toolchain@nightly

  #     - name: Install tools
  #       shell: bash
  #       run: |
  #         set -euxo pipefail

  #         cd tools
  #         npm ci --verbose
  #         # seems to be necessary for node >= 15
  #         [ -n "$(which bats)" ] || npm link bats --verbose
  #         cd ..

  #         ./bin/lintball install-tools --all

  #     - name: Run tests
  #       run: |
  #         cd tools
  #         npm run test

  # install-local:
  #   name: test local installation
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Install lintball
  #       run: npm install "https://github.com/${GITHUB_REPOSITORY}.git#${GITHUB_SHA}"

  #     - name: Install tools
  #       run: npx lintball install-tools --all

  #     - name: Run lintball
  #       run: npx lintball --help

  # install-global:
  #   name: test global installation
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Install lintball
  #       run: sudo npm install -g "https://github.com/${GITHUB_REPOSITORY}.git#${GITHUB_SHA}"

  #     - name: Install tools
  #       run: sudo lintball install-tools --all

  #     - name: Run lintball
  #       run: lintball --help

  build-docker:
    name: "build, test, & push docker"
    runs-on: ubuntu-latest
    # needs: [install-local, install-global]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Run tests in built docker
      - name: Build and test
        run: |
          export LINTBALL_WORKSPACE="${{ github.workspace }}"
          ./scripts/build-and-test.bash

      # Only for git tag pushes; build arm64 and push all images to DockerHub
      - name: Build all platforms and push to DockerHub
        # if: ${{ startsWith(github.ref, 'refs/tags/') }}
        shell: bash
        run: |
          set -uexo pipefail

          declare -a tags=()

          # regex to parse semver 2.0.0, with pre-release and build number
          if [[ $GITHUB_REF_NAME =~ ^v?(([0-9]+)\.([0-9]+)\.([0-9]+)(-([a-zA-Z0-9-]+))?(\+([a-zA-Z0-9\.-]+))?)$ ]]; then
            major="${BASH_REMATCH[2]}"
            minor="${BASH_REMATCH[3]}"
            patch="${BASH_REMATCH[4]}"

            if [ -z "${BASH_REMATCH[5]}" ]; then
              # not a pre-release, tag latest
              tags+=("latest" "v${major}" "v${major}.${minor}" "v${major}.${minor}.${patch}")
            else
              # pre-release, just use the tag
              tags+=("${GITHUB_REF_NAME//[^a-zA-Z0-9]/-}")
            fi
          else
            # not a semantic version, just use the tag
            tags+=("${GITHUB_REF_NAME//[^a-zA-Z0-9]/-}")
          fi

          for tag in "${tags[@]}"; do
            # build for the current platform
            docker buildx build \
              --platform=linux/amd64,linux/arm64 \
              --progress=plain \
              --cache-from=elijahru/lintball \
              --tag=elijahru/lintball:${tag} \
              --target=lintball-latest \
              --load \
              .
          done
